프로그래밍 실습 문제 1
•크기는 3×4, Random 값을 가진 텐서(Tensor)를 생성
• 생성된 텐서의 두 번째 열을 모두 0으로 변경
• 텐서의 모든 원소를 합한 값을 계산하여 print

-----------------------------------------------------------------------
import torch

# 3x4 크기의 랜덤 값을 가진 텐서 생성
tensor = torch.rand(3, 4)

# 생성된 텐서의 두 번째 열을 모두 0으로 변경
tensor[:, 1] = 0

# 텐서의 모든 원소를 합한 값 계산
tensor_sum = torch.sum(tensor)

tensor, tensor_sum.item()
--------------------------------------------------------------------

프로그래밍 실습 문제 2
• 크기는 5×5, Random 값을 가진 텐서(Tensor)를 생성
• 생성된 텐서에서 값이 0.5보다 큰 경우만 추출하여 1차원 텐서로 출력하기

--------------------------------------------------------------
import torch

# 5x5 크기의 랜덤 텐서 생성 (0~1 사이의 균일 분포)
tensor = torch.rand(5, 5)
print("생성된 텐서:\n", tensor)

# 값이 0.5보다 큰 값만 추출하여 1차원 텐서로 변환
mask = tensor > 0.5
result = tensor[mask].flatten()
print("0.5보다 큰 값들:\n", result)
--------------------------------------------------------------

프로그래밍 실습 문제 3
• 크기는 4×4, Random 값을 가진 Numpy 배열(Array)을 생성
• 생성된 배열을 Tensor로 변환하고 파일로 저장하기
• 저장된 파일을 불러와 원본 텐서와 동일한지 확인 (비교함수 적용)

-------------------------------------------------------------------
import numpy as np
import torch

# 4x4 크기의 랜덤 NumPy 배열 생성
numpy_array = np.random.rand(4, 4)
print("NumPy 배열:\n", numpy_array)

# NumPy 배열을 PyTorch Tensor로 변환
tensor = torch.from_numpy(numpy_array)
print("Tensor:\n", tensor)

# Tensor를 파일로 저장 (torch.save)
torch.save(tensor, 'my_tensor.pt')
print("Tensor가 파일로 저장되었습니다.")

# 저장된 파일에서 Tensor 불러오기
loaded_tensor = torch.load('my_tensor.pt')
print("불러온 Tensor:\n", loaded_tensor)

# 원본 Tensor와 불러온 Tensor 비교 (torch.equal)
if torch.equal(tensor, loaded_tensor):
    print("두 Tensor는 동일합니다.")
else:
    print("두 Tensor가 다릅니다.")
------------------------------------------------------------
